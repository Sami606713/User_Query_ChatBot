name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # Job for testing the application
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code from the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Step 3: Cache dependencies
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Step 4: Install dependencies
      - name: Install dependencies
        env:
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
          TAVILY_API_KEY: ${{secrets.TAVILY_API_KEY}}

        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
      
      # Set the aws configration
      - name: Check AWS Credential
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region us-east-1  # Update this to your preferred region
          aws sts get-caller-identity  # Verifies the identity

# Job for building and pushing Docker image
  docker:
    runs-on: ubuntu-latest
    needs: build 

    steps:
      # Step 1: Check out the code from the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.25.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version  # Verify installation

      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
       # Step 3: Build and tag images using docker-compose
      - name: Build Docker images with Compose
        run: |
          docker-compose -f docker-compose.yml build
          docker-compose -f docker-compose.yml push
        env:
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
          TAVILY_API_KEY: ${{secrets.TAVILY_API_KEY}}
      # Step 4: Build and run containers
      - name: Build and run services
        run: |
          docker-compose -f docker-compose.yml up -d

      # Step 6: Tear down the services
      - name: Tear down services
        if: always()  # Ensures this step runs even if previous steps fail
        run: |
          docker-compose down
      
       # Optional: Verify pushed images
      - name: List images
        run: docker images
  
  deployment_job:
    needs: docker  # Ensures this job runs only after the 'docker' job is successful
    runs-on: ubuntu-latest

    steps:
      # Step 1: SSH into the EC2 instance
      - uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          debug: true
          script: |
            # Update packages and install Docker if not already installed
            sudo apt-get update -y
            sudo apt-get install -y docker.io

        
      # Step 2: Display success message
      - name: Success Message
        if: success()  # This ensures the step only runs if all previous steps succeed
        run: echo "ðŸŽ‰ Frontend and backend images deployed successfully!"
